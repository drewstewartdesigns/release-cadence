{"version":3,"sources":["data/weeks.js","data/cadence.js","components/day/day.component.jsx","components/week/week.component.jsx","components/branch/branch.component.jsx","components/actions/actions.component.jsx","components/cadence/cadence.component.jsx","App.js","serviceWorker.js","index.js"],"names":["WeeksData","name","id","days","details","CadenceData","class","branches","actions","branch","firstSprintStartDate","moment","today","weekDiff","Math","abs","week","currentSprintStartDate","clone","day","previousDate","iteration","Day","props","className","map","idx","displayDate","activeDayClass","add","format","toLowerCase","isSame","template","key","length","data-col-position","createDate","Week","weeks","Branch","branchObj","Action","actionObj","createActions","Cadence","cadence","server","App","state","currentDate","this","intervalId","setInterval","window","location","reload","clearInterval","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5eab770b.chunk.js","sourcesContent":["export const WeeksData = [\n    {\n      name: 'Week 1',\n      id: 1,\n      days: [\n        {id: 1},\n        {id: 2},\n        {id: 3, details: 'SF Cutoff'},\n        {id: 4},\n        {id: 5}\n      ]\n    },\n    {\n      name: 'Week 2',\n      id: 2,\n      days: [\n        {id: 1, details: 'Bug Cutoff'},\n        {id: 2},\n        {id: 3},\n        {id: 4, details: 'LF Cutoff'},\n        {id: 5, details: 'Release Day'}\n      ]\n    }/* ,\n    {\n      name: 'Week 1',\n      id: 3,\n      days: [\n        {name: 'Wed', number: 1, id: 1},\n        {name: 'Th', number: 2, id: 2},\n        {name: 'Fri', number: 3, id: 3, details: 'SF Cut'},\n        {name: 'Mon', number: 4, id: 4},\n        {name: 'Tue', number: 5, id: 5}\n      ]\n    },\n    {\n      name: 'Week 2',\n      id: 4,\n      days: [\n        {name: 'Wed', number: 6, id: 1, details: 'Bug Cut'},\n        {name: 'Th', number: 7, id: 2},\n        {name: 'Fri', number: 8, id: 3},\n        {name: 'Mon', number: 9, id: 4},\n        {name: 'Tue', number: 10, id: 5}\n      ]\n    } */\n];\n\n","export const CadenceData = [\n    {\n        name: 'Cert Branch',\n        class: 'cert-container',\n        id: 1,\n        branches: [\n            {\n                name: 'Develop',\n                id: 1,\n                class: 'develop'\n            },\n            {\n                name: 'Release',\n                id: 2,\n                class: 'release'\n            },\n            {\n                name: 'Develop',\n                id: 3,\n                class: 'develop'\n            }/* ,\n            {\n                name: 'Release',\n                id: 4,\n                class: 'release'\n            },\n            {\n                name: 'Develop',\n                id: 5,\n                class: 'develop'\n            } */\n        ],\n        actions: [\n            {\n                class: 'develop',\n                id: 1,\n                branch: [\n                    {\n                        name: 'Development',\n                        class: 'action',\n                        id: 1\n                    }\n                ]\n            },\n            {\n                class: 'release',\n                id: 2,\n                branch: [\n                    {\n                        name: 'Go Live State Regression',\n                        class: 'action regression',\n                        id: 1\n                    },\n                    {\n                        name: 'All Defects',\n                        class: 'action defects',\n                        id: 2\n                    },\n                    {\n                        name: 'Blockers Only',\n                        class: 'action blockers',\n                        id: 3\n                    }\n                ]\n            },\n            {\n                class: 'develop',\n                id: 3,\n                branch: [\n                    {\n                        name: 'Development',\n                        class: 'action',\n                        id: 1\n                    }\n                ]\n            }/* ,\n            {\n                class: 'release',\n                id: 4,\n                branch: [\n                    {\n                        name: 'Go Live State Regression',\n                        class: 'action regression',\n                        id: 1\n                    },\n                    {\n                        name: 'All Defects',\n                        class: 'action defects',\n                        id: 2\n                    },\n                    {\n                        name: 'Blockers Only',\n                        class: 'action blockers',\n                        id: 3\n                    }\n                ]\n            },\n            {\n                class: 'develop',\n                id: 5,\n                branch: [\n                    {\n                        name: 'Development',\n                        class: 'action',\n                        id: 1\n                    }\n                ]\n            } */\n        ]\n    }\n];","import React from 'react';\nimport moment from 'moment';\n\nimport './day.styles.css';\n\nconst firstSprintStartDate = moment('2020-01-02');// replace with date of starting sprint\nconst today = moment();\nconst weekDiff = Math.abs(firstSprintStartDate.week() - today.week());// number of weeks between\nlet currentSprintStartDate = today.clone().day(2);\nif (weekDiff % 2 > 0) {\n    // if evaluation is 1, current day is in week 2\n    // step back an additional week\n    currentSprintStartDate.day(2 - 7);\n}\nlet previousDate = null;// used to store the last found date\nlet iteration = 0;// manual index cuz provided resets each week i.e. only goes to 5\n\nconst createDate = (day) => {\n    let displayDate = currentSprintStartDate.clone();\n    let activeDayClass = '';\n\n    if (previousDate !== null) displayDate = previousDate.clone();\n\n    displayDate.add(1, 'd');\n\n    if (displayDate.format('ddd').toLowerCase() === 'sat') displayDate.add(2, 'd');// advance to the next Monday\n\n    if (today.isSame(displayDate)) activeDayClass = 'active';\n\n    let template =  (\n        <div className='day-container' key={day.id}>\n            {activeDayClass.length > 0 &&\n                <div className='active-column' data-col-position={iteration + 1}></div>\n            }\n            <div className={'day-details ' + (day.details ? 'bordered ' : '') + activeDayClass}>\n                { day.details &&\n                    <p>{ day.details }</p>\n                }\n            </div>\n            <div className={'day-number ' + activeDayClass}>\n                { displayDate.format('MMM D') }\n            </div>\n            <div className={'day-name ' + activeDayClass}>\n                { displayDate.format('ddd') }\n            </div>\n        </div>\n\n    );\n\n    previousDate = displayDate.clone();\n    iteration++;\n    return template;\n}\n\nexport const Day = props => (\n    <div className='day-list'>\n        {props.days.map((day, idx) => (\n            createDate(day, idx)\n        ))}\n    </div>\n)\n\n\n","import React from 'react';\nimport { Day } from '../day/day.component';\nimport './week.styles.css';\n\nexport const Week = props => (\n    <div className='week-list'>\n        {props.weeks.map(week => (\n            <div className='week-container' key={week.id}>\n                <p>{ week.name }</p>\n                <Day days={week.days} />\n            </div>\n        ))}\n    </div>\n)","import React from 'react';\n\nimport './branch.styles.css';\n\nexport const Branch = props => (\n    <div className='branch-container'>\n        {props.branches.map(branchObj => (\n            <div key={branchObj.id} className={'branch-' + branchObj.class}>\n                <div className={branchObj.class}>\n                    <p>CERT is building the {branchObj.name} branch</p>\n                </div>\n            </div>\n        ))}\n    </div>\n)","import React from 'react';\nimport './actions.styles.css';\n\nconst createActions = (actionObj) => {\n    let actions = actionObj.branch.map(branchObj => (\n        <div  className={branchObj.class} key={branchObj.id}>\n            <p>{branchObj.name}</p>\n        </div>\n    ));\n    if (actionObj.branch.length > 1) {\n        actions = <div className=\"nested-action\">{actions}</div>\n    }\n    return actions;\n}\nexport const Action = props => (\n    <div className='action-container'>\n        {props.actions.map(actionObj => (\n            <div className={'action-wrapper-' + actionObj.class} key={actionObj.id}>\n                { createActions(actionObj) }\n            </div>\n        ))}\n    </div>\n)","import React from 'react';\nimport { Branch } from '../branch/branch.component';\nimport { Action } from '../actions/actions.component';\n\nimport './cadence.styles.css';\n\nexport const Cadence = props => (\n    <>\n        {props.cadence.map(server => (\n            <div className={server.class} key={server.id}>\n                <div className='cert-branch'>\n                    <Branch branches={server.branches} />\n                </div>\n\n\n                <Action actions={server.actions} />\n            </div>\n        ))}\n    </>\n)","import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport { WeeksData } from './data/weeks';\nimport { CadenceData } from './data/cadence';\nimport { Week } from './components/week/week.component';\nimport { Cadence } from './components/cadence/cadence.component';\n\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currentDate: moment()\n    };\n  }\n\n  intervalId;\n\n  componentDidMount() {\n    this.intervalId = setInterval(\n      () => window.location.reload(),\n      21600000// 6 hours\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>WCS Release Cadence</h1>\n        </header>\n        <Week weeks={WeeksData} />\n        <Cadence cadence={CadenceData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}